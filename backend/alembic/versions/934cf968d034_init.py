"""init

Revision ID: 934cf968d034
Revises: 
Create Date: 2025-08-28 10:26:44.688007

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '934cf968d034'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('messages')
    op.drop_table('users')
    op.drop_table('reactions')
    op.drop_table('receipts')
    op.drop_table('channels')
    op.drop_table('search_feedback')
    op.add_column('contacts', sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_index(op.f('ix_contacts_circuito'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_congregacion'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_nombre'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_telefono'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_territorio'), table_name='contacts')
    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)
    op.drop_column('contacts', 'metadata')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('contacts', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')
    op.create_index(op.f('ix_contacts_territorio'), 'contacts', ['territorio'], unique=False)
    op.create_index(op.f('ix_contacts_telefono'), 'contacts', ['telefono'], unique=False)
    op.create_index(op.f('ix_contacts_nombre'), 'contacts', ['nombre'], unique=False)
    op.create_index(op.f('ix_contacts_congregacion'), 'contacts', ['congregacion'], unique=False)
    op.create_index(op.f('ix_contacts_circuito'), 'contacts', ['circuito'], unique=False)
    op.drop_column('contacts', 'extra_data')
    op.create_table('search_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('query', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('chosen_contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ok', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chosen_contact_id'], ['contacts.id'], name=op.f('search_feedback_chosen_contact_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('search_feedback_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('search_feedback_pkey'))
    )
    op.create_table('channels',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('channels_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='channels_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('receipts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ts', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], name=op.f('receipts_contact_id_fkey')),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], name=op.f('receipts_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('receipts_pkey'))
    )
    op.create_table('reactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tipo', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ts', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], name=op.f('reactions_contact_id_fkey')),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], name=op.f('reactions_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reactions_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('nombre', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uid', name=op.f('users_uid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('users_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('channel_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sender_contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('kind', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], name=op.f('messages_channel_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    # ### end Alembic commands ###
